Agent Environment
  Vars:
    state: {none, r1, r2, uk,
        p, np, h1, h2, h3, h4, h5, h6        };
    agt: {a1, a2, a3};
  end Vars
  Actions = {receive1,receive2,
                 punish, npunish, wait};
  Protocol:
    (state=none) and agt=a1: {receive1};
    (state=p or state=np) and agt=a2:{receive2};
    state=h6: {punish, npunish};
    state=h1 or state=r1 or state=r2 or state=uk
    or state=h2 or state=h3 or state=h4 or state=h5: {wait};
  end Protocol
  Evolution:
    state=h1 if (state=r1 or state=r2 or state=uk) and Action=wait;
    state=h2 if state=h1 and Action=wait;
    state=h3 if state=h2 and Action=wait;
    state=h4 if state=h3 and Action=wait;
    state=h5 if state=h4 and Action=wait;
    state=h6 if state=h5 and Action=wait;
    state=r1 and agt=a1 if Action=receive1 and Voter1.Action=give1;
    state=r2 and agt=a1 if Action=receive1 and Voter1.Action=give2;
    state=uk and agt=a1 if Action=receive1 and Voter1.Action=ngive;
    state=r1 and agt=a2 if Action=receive2 and Voter2.Action=give1;
    state=r2 and agt=a2 if Action=receive2 and Voter2.Action=give2;
    state=uk and agt=a2 if Action=receive2 and Voter2.Action=ngive;
    state=p and agt=a2 if Action=punish and agt=a1;
    state=np and agt=a2 if Action=npunish and agt=a1;
    state=p and agt=a3 if Action=punish and agt=a2;
    state=np and agt=a3 if Action=npunish and agt=a2;
  end Evolution
end Agent

Agent Voter1
  Vars:
    state: {init, ng1, ng2, v1, v2, g1, g2};
  end Vars
  Actions = {vote1, vote2, give1, give2, none, ngive};
  Protocol:
    state=init: {vote1, vote2};
    state=v1 : {give1, ngive};
    state=v2 : {give2, ngive};
    state=g1 or state=g2 or state=ng1 or state=ng2: {none};
  end Protocol
  Evolution:
    state=v1 if state=init and Action=vote1;
    state=v2 if state=init and Action=vote2;
    state=g1 if (Action=give1) and Environment.Action=receive1;
    state=g2 if (Action=give2) and Environment.Action=receive1;
    state=ng1 if Action=ngive and state=v1 and Environment.Action=receive1;
    state=ng2 if Action=ngive and state=v2 and Environment.Action=receive1;
  end Evolution
end Agent

Agent Voter2
  Vars:
    state: {init, ng1, ng2, v1, v2, g1, g2};
  end Vars
  Actions = {vote1, vote2, give1, give2, none, ngive};
  Protocol:
    state=init: {vote1, vote2};
    state=v1 : {give1, ngive};
    state=v2 : {give2, ngive};
    state=g1 or state=g2 or state=ng1 or state=ng2: {none};
  end Protocol
  Evolution:
    state=v1 if state=init and Action=vote1;
    state=v2 if state=init and Action=vote2;
    state=g1 if (Action=give1) and Environment.Action=receive2;
    state=g2 if (Action=give2) and Environment.Action=receive2;
    state=ng1 if Action=ngive and state=v1 and Environment.Action=receive2;
    state=ng2 if Action=ngive and state=v2 and Environment.Action=receive2;
  end Evolution

end Agent

Evaluation
  punish1 if Environment.state=p and Environment.agt=a2;
  npunish1 if Environment.state=np and Environment.agt=a2;
  v1_1_give if Voter1.state=g1;
  v2_1_give if Voter1.state=g2;
  ngive1 if Voter1.state=ng1 or Voter1.state=ng2;
  give1 if Voter1.state=g1 or Voter1.state=g2;
  
  punish2 if Environment.state=p and Environment.agt=a3;
  npunish2 if Environment.state=np and Environment.agt=a3;
  v1_2_give if Voter2.state=g1;
  v2_2_give if Voter2.state=g2;
  ngive2 if Voter2.state=ng1 or Voter2.state=ng2;
  give2 if Voter2.state=g1 or Voter2.state=g2;
end Evaluation

InitStates
  Environment.state=none and (Environment.agt=a1) and (Voter1.state=init)
  and (Voter2.state=init)
  ;
end InitStates

Groups
  g1 = {Environment};
  g2 = {Voter1, Voter2};
  g3 = {Voter1};
  g4 = {Voter2};
end Groups

Formulae
  (!<g3> X ! (<g1> F ((v1_1_give and npunish1)
          or (v2_1_give and punish1)
          or (ngive1 and punish1 ))))
  and (!<g4> X ! (<g1> F ((v1_2_give and npunish2)
	  or (v2_2_give and punish2)
	  or (ngive2 and punish2)
		)))
		;
end Formulae
