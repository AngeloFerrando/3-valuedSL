-- The Bit transmission problem in ISPL ( from Fagin et al., Reasoning
-- about knowledge, 1995).
-- Basic case, no faulty behaviour for Receiver.

Agent Environment
  Vars:
    state : {S,R,SR,none};
  end Vars
  Actions = {S,SR,R,none};
  Protocol:
    state=S: {S,SR,R,none};
    state=R: {S,SR,R,none};
    state=SR: {S,SR,R,none};
    state=none: {S,SR,R,none};
  end Protocol
  Evolution:
    state=S if (Action=S);
    state=R if (Action=R);
    state=SR if (Action=SR);
    state=none if (Action=none);
  end Evolution
end Agent

Agent Sender
  Vars:
    bit : { b0, b1}; -- The bit can be either zero or one
    ack : boolean;  -- This is true when the ack has been received
  end Vars
  Actions = { sb0,sb1,nothing };
  Protocol:
    bit=b0 and ack=false : {sb0};
    bit=b1 and ack=false : {sb1};
    ack=true : {nothing};
  end Protocol
  Evolution:
    (ack=true) if (ack=false) and
       ( ( (Receiver.Action=sendack) and (Environment.Action=SR) )
        or
       ( (Receiver.Action=sendack) and (Environment.Action=R) )
       );
  end Evolution
end Agent

Agent Receiver
  Vars:
    state : { empty, r0, r1 };
  end Vars
  Actions = {nothing,sendack};
  Protocol:
    state=empty : {nothing};
    (state=r0 or state=r1): {sendack};
  end Protocol
  Evolution:
    state=r0 if ( ( (Sender.Action=sb0) and (state=empty) and
                    (Environment.Action=SR) ) or
                  ( (Sender.Action=sb0) and (state=empty) and
                    (Environment.Action=S) ) );
    state=r1 if ( ( (Sender.Action=sb1) and (state=empty) and
                    (Environment.Action=SR) ) or
                  ( (Sender.Action=sb1) and (state=empty) and
                    (Environment.Action=S) ) );
  end Evolution
end Agent

Evaluation
  recbit if ( (Receiver.state=r0) or (Receiver.state=r1) );
  recack if ( ( Sender.ack = true ) );
  bit0 if ( (Sender.bit=b0));
  bit1 if ( (Sender.bit=b1) );
  tr if (Sender.bit = b0 or Sender.bit = b1);
  envworks if ( Environment.state=SR );
  envdead if ( Environment.state=none);
end Evaluation

InitStates
  ( (Sender.bit=b0) or (Sender.bit=b1) ) and
  ( Receiver.state=empty ) and ( Sender.ack=false);
end InitStates

Groups
  g1 = {Sender,Receiver};
end Groups

Fairness
  envworks;
end Fairness

Formulae
  EG recack; --False
  CTL* E G recack; --False
  EX recbit; --True
  CTL* E X recbit; --True
  EX EX recack; --True
  CTL* E X E X recack; --True
  EX AX recack; --False
  CTL* E X A X recack; --False
  EG AG recack; --False
  CTL* E G A G recack; --False
  !AX recbit; --True
  CTL* ! A X recbit; --True
  ! EF (bit0 and EX bit1); --True
  CTL* ! E(F(bit0 and E(X(bit1)))); --True
  AG EF recack; --True
  CTL* A G E F recack; --True
  AG AF recack; --True
  CTL* A G A F recack; --True
  EF AG recack; --True
  CTL* E F A G recack; --True
  A((!recack) U (!recbit)); --True
  CTL* A((!recack) U (!recbit)); --True
  AX AX !recack; --False
  CTL* A X A X (!recack); --False
  AX EX !recack; --True
  CTL* A X E X (!recack); --True
  AF(recbit -> AF (recack)); --True
  CTL* A (F (recbit -> A(F(recack)))); --True
  AF(recbit -> K(Sender,K(Receiver,bit0) or K(Receiver,bit1))); --True
  CTL* A(F(recbit -> K(Sender,K(Receiver,bit0) or K(Receiver, bit1)))); --True
end Formulae
