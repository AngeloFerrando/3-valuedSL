-- The Bit transmission problem in ISPL ( from Fagin et al., Reasoning
-- about knowledge, 1995).
-- Basic case, no faulty behaviour for Receiver.

Agent Environment
  Vars:
    state : {S,R,SR,none};
  end Vars
  Actions = {S,SR,R,none};
  Protocol:
    state=S: {S,SR,R,none};
    state=R: {S,SR,R,none};
    state=SR: {S,SR,R,none};
    state=none: {S,SR,R,none};
  end Protocol
  Evolution:
    state=S if (Action=S);
    state=R if (Action=R);
    state=SR if (Action=SR);
    state=none if (Action=none);
  end Evolution
end Agent

Agent Sender
  Vars:
    bit : { b0, b1}; -- The bit can be either zero or one
    ack : boolean;  -- This is true when the ack has been received
  end Vars
  Actions = { sb0,sb1,nothing };
  Protocol:
    bit=b0 and ack=false : {sb0};
    bit=b1 and ack=false : {sb1};
    ack=true : {nothing};
  end Protocol
  Evolution:
    (ack=true) if (ack=false) and
       ( ( (Receiver.Action=sendack) and (Environment.Action=SR) )
        or
       ( (Receiver.Action=sendack) and (Environment.Action=R) )
       );
  end Evolution
end Agent

Agent Receiver
  Vars:
    state : { empty, r0, r1 };
  end Vars
  Actions = {nothing,sendack};
  Protocol:
    state=empty : {nothing};
    (state=r0 or state=r1): {sendack};
  end Protocol
  Evolution:
    state=r0 if ( ( (Sender.Action=sb0) and (state=empty) and
                    (Environment.Action=SR) ) or
                  ( (Sender.Action=sb0) and (state=empty) and
                    (Environment.Action=S) ) );
    state=r1 if ( ( (Sender.Action=sb1) and (state=empty) and
                    (Environment.Action=SR) ) or
                  ( (Sender.Action=sb1) and (state=empty) and
                    (Environment.Action=S) ) );
  end Evolution
end Agent

Evaluation
  recbit if ( (Receiver.state=r0) or (Receiver.state=r1) );
  recack if ( ( Sender.ack = true ) );
  bit0 if ( (Sender.bit=b0));
  bit1 if ( (Sender.bit=b1) );
  tr if (Sender.bit = b0 or Sender.bit = b1);
  envworks if ( Environment.state=SR );
  envdead if ( Environment.state=none);
end Evaluation

InitStates
  ( (Sender.bit=b0) or (Sender.bit=b1) ) and
  ( Receiver.state=empty ) and ( Sender.ack=false) and
  (Environment.state = none);
end InitStates

Groups
  g1 = {Sender,Receiver};
end Groups

-- No fairness

Formulae
  CTL* E (G F envworks); -- True
  CTL* E ((G F envworks) and (F recack)); -- True
  CTL* E ((G F envworks) and (G !recack)); -- False
  CTL* A ((G F envworks)); -- False
  CTL* A (G F envworks) -> !tr; -- True, the antecedent is bad
  CTL* A G F E F G recbit; -- True; 'on all paths, infinitely often, there exists a path where recbit eventually permanently becomes true'
  CTL* A G F A F G recbit; -- False; 'on all paths infinitely often on all paths recbit eventually permanently becomes true.' Not if the environment's dead.
  CTL* E G F E F G recbit; -- True; 'there is a path such that, infinitely often, there exists a path where recbit eventually permanently becomes true'
  CTL* E((G !envworks) and (F recack)); -- True
  CTL* E((G !envworks) and (X(G !envdead)) and (X(recbit)) and X(X(recack))); -- True (this is a pretty precise path)
  CTL* E((G !envworks) and (X(G !envdead)) and (X(recbit)) and X(X(!recack)) and X(X(X(recack)))); -- True (this is a very precise path)
  CTL* E((G F !envdead) and (G !recack)); -- True. (If the channel only works in one direction)
  CTL* E((G F !envdead) and (G !recbit)); -- True. (Channel cycles between S and dead infinitely)
  CTL* A((X envworks) -> (X X recbit)); --True.
  CTL* A((X (envworks and X envworks)) -> (X X X recack)); --True.
end Formulae
