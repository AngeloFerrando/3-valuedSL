-- The Bit transmission problem in ISPL ( from Fagin et al., Reasoning
-- about knowledge, 1995).
-- Basic case, no faulty behaviour for Receiver.

Agent Environment
  Vars:
    state : {S,R,SR,none};
  end Vars
  Actions = {S,SR,R,none};
  Protocol:
    state=S: {S,SR,R,none};
    state=R: {S,SR,R,none};
    state=SR: {S,SR,R,none};
    state=none: {S,SR,R,none};
  end Protocol
  Evolution:
    state=S if (Action=S);
    state=R if (Action=R);
    state=SR if (Action=SR);
    state=none if (Action=none);
  end Evolution
end Agent

Agent Sender
  Vars:
    bit : { b0, b1}; -- The bit can be either zero or one
    ack : boolean;  -- This is true when the ack has been received
  end Vars
  Actions = { sb0,sb1,nothing };
  Protocol:
    bit=b0 and ack=false : {sb0};
    bit=b1 and ack=false : {sb1};
    ack=true : {nothing};
  end Protocol
  Evolution:
    (ack=true) if (ack=false) and
       ( ( (Receiver.Action=sendack) and (Environment.Action=SR) )
        or
       ( (Receiver.Action=sendack) and (Environment.Action=R) )
       );
  end Evolution
end Agent

Agent Receiver
  Vars:
    state : { empty, r0, r1 };
  end Vars
  Actions = {nothing,sendack};
  Protocol:
    state=empty : {nothing};
    (state=r0 or state=r1): {sendack};
  end Protocol
  Evolution:
    state=r0 if ( ( (Sender.Action=sb0) and (state=empty) and
                    (Environment.Action=SR) ) or
                  ( (Sender.Action=sb0) and (state=empty) and
                    (Environment.Action=S) ) );
    state=r1 if ( ( (Sender.Action=sb1) and (state=empty) and
                    (Environment.Action=SR) ) or
                  ( (Sender.Action=sb1) and (state=empty) and
                    (Environment.Action=S) ) );
  end Evolution
end Agent

Evaluation
  recbit if ( (Receiver.state=r0) or (Receiver.state=r1) );
  recack if ( ( Sender.ack = true ) );
  bit0 if ( (Sender.bit=b0));
  bit1 if ( (Sender.bit=b1) );
  tr if (Sender.bit = b0 or Sender.bit = b1);
  envworks if ( Environment.state=SR );
  envdead if ( Environment.state=none);
end Evaluation

InitStates
  ( (Sender.bit=b0) or (Sender.bit=b1) ) and
  ( Receiver.state=empty ) and ( Sender.ack=false);
end InitStates

Groups
  g1 = {Sender,Receiver};
end Groups

Fairness
  envworks;
end Fairness

Formulae
  LTL F (K(Sender, K(Receiver, bit0) or K(Receiver, bit1))); -- True: because of fairness at some point sender knows receiver knows 0 or 1
  LTL G (recack -> K(Sender, (K(Receiver, bit0) or K(Receiver, bit1)))); -- True: if ack received then at that point sender knows receiver knows
  LTL G ((recack and K(Sender, bit1)) -> K(Sender, K(Receiver, bit1))); -- True: specialisation of the above
  LTL GK(g1, G F envworks); -- True: the possible worlds are restricted to states where the fairness conditions hold
  LTL DK(g1, G F envworks); -- True: the possible worlds are restricted to states where the fairness conditions hold
  LTL GCK(g1, G F envworks); -- True: the possible worlds are restricted to states where the fairness conditions hold
  LTL GK(g1, F recbit); -- True: the possible worlds are restricted to states where the fairness conditions hold
  LTL DK(g1, F recbit); -- True: the possible worlds are restricted to states where the fairness conditions hold
  LTL GCK(g1, F recbit); -- True: the possible worlds are restricted to states where the fairness conditions hold
  LTL F GK(g1, recbit); -- True: the possible worlds are restricted to states where the fairness conditions hold
  LTL F DK(g1, recbit); -- True: the possible worlds are restricted to states where the fairness conditions hold
  LTL (!K(Sender, recbit)) U K(Sender, recack); -- True: sender doesn't know receiver has got a bit until it's got the ack
  LTL F (K(Sender, recbit)); -- True: because of fairness at some point sender gets an ack, at which point it's always the case that recbit
  LTL F (K(Receiver, recbit)); -- True: because of fairness at some point receiver gets the bit
  LTL F (K(Receiver, recbit) and !K(Sender, recbit)); -- True: there is such a time (before the ack goes through)
  LTL K(Sender, (!K(Sender, recbit)) U recack); -- True: Sender knows it can't know the receiver received the bit except through an ack
  LTL F (K(Receiver, recbit) and K(Receiver, !K(Sender, recbit))); -- False: while the receiver *can* know this, we have abstracted too much state
  LTL F (K(Receiver, recack)); -- False: although because of fairness sender will eventually get an ack, receiver can't know this
  LTL G (recack -> K(Sender,(K(Receiver,bit0) and K(Receiver,bit1)))); -- False: obvious
  LTL G (recack -> K(Sender, K(Receiver, bit0))); -- False: it could be 1
  LTL F (K(Sender, K(Receiver, K(Sender, recbit)))); -- False: The sender doesn't know the receiver knows the sender got the bit (the receiver can't know anyway)
  LTL F (K(Sender, recbit) and !K(Sender, recack)); -- False: there's no such time
  LTL F GCK(g1, recbit); -- False: the receiver doesn't know the sender knows that it received its ack
  LTL F GK(g1, recbit) -> F GCK(g1, recbit); -- False: as above.
end Formulae
