-- The Bit transmission problem in ISPL ( from Fagin et al., Reasoning
-- about knowledge, 1995).
-- Basic case, no faulty behaviour for Receiver.

Agent Environment
  Vars:
    state : {S,R,SR,none};
  end Vars
  Actions = {S,SR,R,none};
  Protocol:
    state=S: {S,SR,R,none};
    state=R: {S,SR,R,none};
    state=SR: {S,SR,R,none};
    state=none: {S,SR,R,none};
  end Protocol
  Evolution:
    state=S if (Action=S);
    state=R if (Action=R);
    state=SR if (Action=SR);
    state=none if (Action=none);
  end Evolution
end Agent

Agent Sender
  Vars:
    bit : { b0, b1}; -- The bit can be either zero or one
    ack : boolean;  -- This is true when the ack has been received
  end Vars
  Actions = { sb0,sb1,nothing };
  Protocol:
    bit=b0 and ack=false : {sb0};
    bit=b1 and ack=false : {sb1};
    ack=true : {nothing};
  end Protocol
  Evolution:
    (ack=true) if (ack=false) and
       ( ( (Receiver.Action=sendack) and (Environment.Action=SR) )
        or
       ( (Receiver.Action=sendack) and (Environment.Action=R) )
       );
  end Evolution
end Agent

Agent Receiver
  Vars:
    state : { empty, r0, r1 };
  end Vars
  Actions = {nothing,sendack};
  Protocol:
    state=empty : {nothing};
    (state=r0 or state=r1): {sendack};
  end Protocol
  Evolution:
    state=r0 if ( ( (Sender.Action=sb0) and (state=empty) and
                    (Environment.Action=SR) ) or
                  ( (Sender.Action=sb0) and (state=empty) and
                    (Environment.Action=S) ) );
    state=r1 if ( ( (Sender.Action=sb1) and (state=empty) and
                    (Environment.Action=SR) ) or
                  ( (Sender.Action=sb1) and (state=empty) and
                    (Environment.Action=S) ) );
  end Evolution
end Agent

Evaluation
  recbit if ( (Receiver.state=r0) or (Receiver.state=r1) );
  recack if ( ( Sender.ack = true ) );
  bit0 if ( (Sender.bit=b0));
  bit1 if ( (Sender.bit=b1) );
  tr if (Sender.bit = b0 or Sender.bit = b1);
  envworks if ( Environment.state=SR );
  envdead if ( Environment.state=none);
end Evaluation

InitStates
  ( (Sender.bit=b0) or (Sender.bit=b1) ) and
  ( Receiver.state=empty ) and ( Sender.ack=false);
end InitStates

Groups
  g1 = {Sender,Receiver};
end Groups

--Fairness
--  envworks;
--end Fairness

Formulae
  LTL (G F envworks) -> F recbit; -- True: if the env. works infinitely often then we'll eventually receive the bit
  LTL (G F envworks) -> F recack; -- True: if the env. works infinitely often we'll eventually receive the ack
  LTL G (recack -> recbit); -- True: if we have acked the bit then the receiver must have received it
  LTL G F recack -> G F recbit; -- True.
  LTL G bit0 or G bit1; -- True: bits are invariant
  LTL G (envworks or !envworks); -- True: it works or it doesn't at any state along any path
  LTL F (bit0 or bit1); -- True
  LTL F bit0 or F bit1; -- True
  LTL F G (bit0 or bit1); -- True
  LTL (F G bit0) -> (G F bit0); -- True, since bits are invariant
  LTL F recbit or G !recbit; -- True: equivalent to F recbit or ! F recbit
  LTL F recbit or !F recbit; -- True: modal equivalence
  LTL (G envdead) -> (!F recack); -- True, if environment dead no communication occurs.
  LTL (!recack) U (!recbit); -- True: receiver must receive bit before sender receives an ack
  LTL ((!bit0) U bit0) or G(! bit0); -- True: if the bit is one then G(! bit0) holds forever
  LTL (((!recbit) U recbit) or G(!recbit)); -- True, the bit isn't received 'weak until' the bit is.
  LTL F F F G G G F F G G F G (bit0 or bit1); -- True. Meant as a stress test. Note algorithm exponential in formula length
  LTL (G !envdead) -> (F recack); -- False. Even on paths where the environment is always not-dead, we might not ever get an ack (always 1 direction).
  LTL (G !envdead) -> (F recbit); -- False. Even on paths where the environment is always not-dead, we might not ever get the bit (always S).
  LTL G (recbit -> recack); -- False: we can have the bit received but not acked
  LTL ! F ! (!recbit or recack); -- False: equivalent to above, but with G unrolled
  LTL G (bit0 and bit1); -- False
  LTL F (bit0 and bit1); -- False
  LTL G envworks or G !envworks; -- False: envworks is not invariant, unlike the bits
  LTL F recack; -- False: no guarantee environment works
  LTL (G !envworks) -> (F recack); -- False: it could just be permanently dead
  LTL recbit U recack; -- False: recbit doesn't hold from the beginning and recack doesn't hold immediately
  LTL ((!bit0) U bit0); -- False: if the bit is one then !bit0 holds forever
  LTL (!recbit) U recbit; -- False: if the channel doesn't work then !recbit holds forever
  LTL ((!recbit) U recbit); -- False, recbit could remain false forever
end Formulae
