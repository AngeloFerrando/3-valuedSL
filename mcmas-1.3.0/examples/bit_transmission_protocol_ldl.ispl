-- The Bit transmission problem in ISPL ( from Fagin et al., Reasoning
-- about knowledge, 1995).
-- Basic case, no faulty behaviour for Receiver.

Agent Environment
  Vars:
    state : {S,R,SR,none};
  end Vars
  Actions = {S,SR,R,none};
  Protocol:
    state=S: {S,SR,R,none};
    state=R: {S,SR,R,none};
    state=SR: {S,SR,R,none};
    state=none: {S,SR,R,none};
  end Protocol
  Evolution:
    state=S if (Action=S);
    state=R if (Action=R);
    state=SR if (Action=SR);
    state=none if (Action=none);
  end Evolution
end Agent

Agent Sender
  Vars:
    bit : { b0, b1}; -- The bit can be either zero or one
    ack : boolean;  -- This is true when the ack has been received
  end Vars
  Actions = { sb0,sb1,nothing };
  Protocol:
    bit=b0 and ack=false : {sb0};
    bit=b1 and ack=false : {sb1};
    ack=true : {nothing};
  end Protocol
  Evolution:
    (ack=true) if (ack=false) and 
       ( ( (Receiver.Action=sendack) and (Environment.Action=SR) ) 
        or
       ( (Receiver.Action=sendack) and (Environment.Action=R) )
       );
  end Evolution
end Agent

Agent Receiver
  Vars:
    state : { empty, r0, r1 };
  end Vars
  Actions = {nothing,sendack};
  Protocol:
    state=empty : {nothing};
    (state=r0 or state=r1): {sendack};
  end Protocol
  Evolution:
    state=r0 if ( ( (Sender.Action=sb0) and (state=empty) and 
                    (Environment.Action=SR) ) or 
                  ( (Sender.Action=sb0) and (state=empty) and 
                    (Environment.Action=S) ) );
    state=r1 if ( ( (Sender.Action=sb1) and (state=empty) and 
                    (Environment.Action=SR) ) or 
                  ( (Sender.Action=sb1) and (state=empty) and 
                    (Environment.Action=S) ) );
  end Evolution
end Agent

Evaluation
  recbit if ( (Receiver.state=r0) or (Receiver.state=r1) );
  recack if ( ( Sender.ack = true ) );
  bit0 if ( (Sender.bit=b0));
  bit1 if ( (Sender.bit=b1) );
  bit2 if ( (Sender.bit=b1) );
  bit3 if ( (Sender.bit=b1) );
  bit4 if ( (Sender.bit=b1) );
  alpha if ( (Sender.bit=b1) );
  tt if ( (Sender.bit=b0) or (Sender.bit=b1) );
  beta if ( (Sender.bit=b1) );
  envworks if ( Environment.state=SR );
end Evaluation

InitStates
  ( (Sender.bit=b0) or (Sender.bit=b1) ) and
  ( Receiver.state=empty ) and ( Sender.ack=false) and
  ( Environment.state=none );
end InitStates

Groups
  g1 = {Sender,Receiver};
end Groups

Fairness
  envworks;
end Fairness

Formulae
  --LDL <(([bit1]bit0) or ([bit0]bit1))?;recack> bit0;
  --LDL <recbit; (([bit1]bit0) or ([bit0]bit1))?;recack> bit0;
  --LDL [envworks;(bit0?;(bit1+recbit+recack*))] bit1;
  --LDL [bit0]<bit1?>[(<recbit?>recack)?]envworks;

  --LDL <recbit;recbit;recbit> recack;
  --LDL <(bit0 + bit1)> recack;
  --LDL <(bit0; bit1)*> recack;
  --LDL [(bit0 + bit1)*] recack;
  
  -- Test automata stuff
  --LDL <alpha? ; (bit0 ? ; (bit1 ? ; bit2 ; bit3 ? )*; bit4 ?)*; beta?> recack;
  --LDL <(alpha? + beta?);(alpha? + bit1?);(alpha? + bit0?)*;(beta? + bit1?)> bit0;
  --LDL <(alpha? + beta?);(alpha? + beta?)> bit0;
  --LDL <(alpha? + beta?);beta?> bit0;

  LDL [tt;envworks;envworks]recack;

  --LDL <recbit?;bit0>recack;
end Formulae
