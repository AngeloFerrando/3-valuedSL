-- The protocol for the dining cryptographers (Chaum)
-- This file is automatically generated for 6 cryptographers
Semantics=SingleAssignment;

Agent Environment
  Obsvars:
    numberofodd : { none, even, odd };
  end Obsvars

  Vars:
    coin1 : {head,tail};
    coin2 : {head,tail};
    coin3 : {head,tail};
    coin4 : {head,tail};
    coin5 : {head,tail};
    coin6 : {head,tail};
    say1 : 0..1;
    say2 : 0..1;
    say3 : 0..1;
    say4 : 0..1;
    say5 : 0..1;
    say6 : 0..1;
    count : boolean;
  end Vars

  Actions = { none };
  Protocol:
    Other : {none};
  end Protocol

  Evolution:
    say1 = 0 if numberofodd=none and DinCrypt1.Action=sayequal;
    say1 = 1 if numberofodd=none and DinCrypt1.Action=saydifferent;
    say2 = 0 if numberofodd=none and DinCrypt2.Action=sayequal;
    say2 = 1 if numberofodd=none and DinCrypt2.Action=saydifferent;
    say3 = 0 if numberofodd=none and DinCrypt3.Action=sayequal;
    say3 = 1 if numberofodd=none and DinCrypt3.Action=saydifferent;
    say4 = 0 if numberofodd=none and DinCrypt4.Action=sayequal;
    say4 = 1 if numberofodd=none and DinCrypt4.Action=saydifferent;
    say5 = 0 if numberofodd=none and DinCrypt5.Action=sayequal;
    say5 = 1 if numberofodd=none and DinCrypt5.Action=saydifferent;
    say6 = 0 if numberofodd=none and DinCrypt6.Action=sayequal;
    say6 = 1 if numberofodd=none and DinCrypt6.Action=saydifferent;
    count = true if numberofodd=none and (DinCrypt1.Action=sayequal or DinCrypt1.Action=saydifferent);
    numberofodd=even if numberofodd=none and count = true and ( 
        say1+say2+say3+say4+say5+say6=0 or say1+say2+say3+say4+say5+say6=2 or say1+say2+say3+say4+say5+say6=4 or say1+say2+say3+say4+say5+say6=6);

    numberofodd=odd if numberofodd=none and count = true and ( 
        say1+say2+say3+say4+say5+say6=1 or say1+say2+say3+say4+say5+say6=3 or say1+say2+say3+say4+say5+say6=5);

  end Evolution
end Agent

Agent DinCrypt1
  Lobsvars = {coin1, coin6};
  Vars:
    payer : {yes,no};
    seedifferent : { empty, yes, no };
  end Vars
  Actions = { sayequal, saydifferent, none };
  Protocol:
    (payer=no and seedifferent=yes): {saydifferent};
    (payer=no and seedifferent=no) : {sayequal};
    (payer=yes and seedifferent=yes): {sayequal};
    (payer=yes and seedifferent=no) : {saydifferent};
    Other: {none};
  end Protocol
  Evolution:
    (seedifferent=no) if ( seedifferent=empty and Environment.coin1=head and Environment.coin6=head ) or
      ( seedifferent=empty and Environment.coin1=tail and Environment.coin6=tail ); 
    (seedifferent=yes)  if ( seedifferent=empty and Environment.coin1=head and Environment.coin6=tail ) or
      ( seedifferent=empty and Environment.coin1=tail and Environment.coin6=head );
  end Evolution
end Agent
Agent DinCrypt2
  Lobsvars = {coin2, coin1};
  Vars:
    payer : {yes,no};
    seedifferent : { empty, yes, no };
  end Vars
  Actions = { sayequal, saydifferent, none };
  Protocol:
    (payer=no and seedifferent=yes): {saydifferent};
    (payer=no and seedifferent=no) : {sayequal};
    (payer=yes and seedifferent=yes): {sayequal};
    (payer=yes and seedifferent=no) : {saydifferent};
    Other: {none};
  end Protocol
  Evolution:
    (seedifferent=no) if ( seedifferent=empty and Environment.coin2=head and Environment.coin1=head ) or
      ( seedifferent=empty and Environment.coin2=tail and Environment.coin1=tail ); 
    (seedifferent=yes)  if ( seedifferent=empty and Environment.coin2=head and Environment.coin1=tail ) or
      ( seedifferent=empty and Environment.coin2=tail and Environment.coin1=head );
  end Evolution
end Agent
Agent DinCrypt3
  Lobsvars = {coin3, coin2};
  Vars:
    payer : {yes,no};
    seedifferent : { empty, yes, no };
  end Vars
  Actions = { sayequal, saydifferent, none };
  Protocol:
    (payer=no and seedifferent=yes): {saydifferent};
    (payer=no and seedifferent=no) : {sayequal};
    (payer=yes and seedifferent=yes): {sayequal};
    (payer=yes and seedifferent=no) : {saydifferent};
    Other: {none};
  end Protocol
  Evolution:
    (seedifferent=no) if ( seedifferent=empty and Environment.coin3=head and Environment.coin2=head ) or
      ( seedifferent=empty and Environment.coin3=tail and Environment.coin2=tail ); 
    (seedifferent=yes)  if ( seedifferent=empty and Environment.coin3=head and Environment.coin2=tail ) or
      ( seedifferent=empty and Environment.coin3=tail and Environment.coin2=head );
  end Evolution
end Agent
Agent DinCrypt4
  Lobsvars = {coin4, coin3};
  Vars:
    payer : {yes,no};
    seedifferent : { empty, yes, no };
  end Vars
  Actions = { sayequal, saydifferent, none };
  Protocol:
    (payer=no and seedifferent=yes): {saydifferent};
    (payer=no and seedifferent=no) : {sayequal};
    (payer=yes and seedifferent=yes): {sayequal};
    (payer=yes and seedifferent=no) : {saydifferent};
    Other: {none};
  end Protocol
  Evolution:
    (seedifferent=no) if ( seedifferent=empty and Environment.coin4=head and Environment.coin3=head ) or
      ( seedifferent=empty and Environment.coin4=tail and Environment.coin3=tail ); 
    (seedifferent=yes)  if ( seedifferent=empty and Environment.coin4=head and Environment.coin3=tail ) or
      ( seedifferent=empty and Environment.coin4=tail and Environment.coin3=head );
  end Evolution
end Agent
Agent DinCrypt5
  Lobsvars = {coin5, coin4};
  Vars:
    payer : {yes,no};
    seedifferent : { empty, yes, no };
  end Vars
  Actions = { sayequal, saydifferent, none };
  Protocol:
    (payer=no and seedifferent=yes): {saydifferent};
    (payer=no and seedifferent=no) : {sayequal};
    (payer=yes and seedifferent=yes): {sayequal};
    (payer=yes and seedifferent=no) : {saydifferent};
    Other: {none};
  end Protocol
  Evolution:
    (seedifferent=no) if ( seedifferent=empty and Environment.coin5=head and Environment.coin4=head ) or
      ( seedifferent=empty and Environment.coin5=tail and Environment.coin4=tail ); 
    (seedifferent=yes)  if ( seedifferent=empty and Environment.coin5=head and Environment.coin4=tail ) or
      ( seedifferent=empty and Environment.coin5=tail and Environment.coin4=head );
  end Evolution
end Agent
Agent DinCrypt6
  Lobsvars = {coin6, coin5};
  Vars:
    payer : {yes,no};
    seedifferent : { empty, yes, no };
  end Vars
  Actions = { sayequal, saydifferent, none };
  Protocol:
    (payer=no and seedifferent=yes): {saydifferent};
    (payer=no and seedifferent=no) : {sayequal};
    (payer=yes and seedifferent=yes): {sayequal};
    (payer=yes and seedifferent=no) : {saydifferent};
    Other: {none};
  end Protocol
  Evolution:
    (seedifferent=no) if ( seedifferent=empty and Environment.coin6=head and Environment.coin5=head ) or
      ( seedifferent=empty and Environment.coin6=tail and Environment.coin5=tail ); 
    (seedifferent=yes)  if ( seedifferent=empty and Environment.coin6=head and Environment.coin5=tail ) or
      ( seedifferent=empty and Environment.coin6=tail and Environment.coin5=head );
  end Evolution
end Agent
Evaluation
  c1paid if ( DinCrypt1.payer=yes );
  c2paid if ( DinCrypt2.payer=yes );
  c3paid if ( DinCrypt3.payer=yes );
  c4paid if ( DinCrypt4.payer=yes );
  c5paid if ( DinCrypt5.payer=yes );
  c6paid if ( DinCrypt6.payer=yes );
  odd if ( Environment.numberofodd=odd);
  even if ( Environment.numberofodd=even);
end Evaluation
InitStates
 (  ( DinCrypt1.payer=yes and DinCrypt2.payer=no and DinCrypt3.payer=no and DinCrypt4.payer=no and DinCrypt5.payer=no and DinCrypt6.payer=no)  or 
 ( DinCrypt1.payer=no and DinCrypt2.payer=yes and DinCrypt3.payer=no and DinCrypt4.payer=no and DinCrypt5.payer=no and DinCrypt6.payer=no)  or 
 ( DinCrypt1.payer=no and DinCrypt2.payer=no and DinCrypt3.payer=yes and DinCrypt4.payer=no and DinCrypt5.payer=no and DinCrypt6.payer=no)  or 
 ( DinCrypt1.payer=no and DinCrypt2.payer=no and DinCrypt3.payer=no and DinCrypt4.payer=yes and DinCrypt5.payer=no and DinCrypt6.payer=no)  or 
 ( DinCrypt1.payer=no and DinCrypt2.payer=no and DinCrypt3.payer=no and DinCrypt4.payer=no and DinCrypt5.payer=yes and DinCrypt6.payer=no)  or 
 ( DinCrypt1.payer=no and DinCrypt2.payer=no and DinCrypt3.payer=no and DinCrypt4.payer=no and DinCrypt5.payer=no and DinCrypt6.payer=yes)  or 
 ( DinCrypt1.payer=no and DinCrypt2.payer=no and DinCrypt3.payer=no and DinCrypt4.payer=no and DinCrypt5.payer=no and DinCrypt6.payer=no)  ) 
 and (Environment.numberofodd=none 
 and DinCrypt1.seedifferent=empty and DinCrypt2.seedifferent=empty and DinCrypt3.seedifferent=empty and DinCrypt4.seedifferent=empty and DinCrypt5.seedifferent=empty and DinCrypt6.seedifferent=empty and Environment.say1=0 and Environment.say2=0 and Environment.say3=0 and Environment.say4=0 and Environment.say5=0 and Environment.say6=0 and Environment.count=false);
end InitStates
Formulae
AG( (odd and !c1paid) -> (K(DinCrypt1,(c2paid or c3paid or c4paid or c5paid or c6paid) ) ) and !K(DinCrypt1,c2paid) and !K(DinCrypt1,c3paid) and !K(DinCrypt1,c4paid) and !K(DinCrypt1,c5paid) and !K(DinCrypt1,c6paid) );
[[x1]] [[x2]] [[x3]] [[x4]] [[x5]] [[x6]] (DinCrypt1, x1) (DinCrypt2, x2) (DinCrypt3, x3) (DinCrypt4, x4) (DinCrypt5, x5) (DinCrypt6, x6) [[xe]] (Environment, xe) G ((odd and !c1paid) -> (K(DinCrypt1,(c2paid or c3paid or c4paid or c5paid or c6paid) ) ) and !K(DinCrypt1,c2paid) and !K(DinCrypt1,c3paid) and !K(DinCrypt1,c4paid) and !K(DinCrypt1,c5paid) and !K(DinCrypt1,c6paid));
end Formulae
